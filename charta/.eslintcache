[{"/Users/rubenkrueger/Downloads/Team3/charta/src/index.tsx":"1","/Users/rubenkrueger/Downloads/Team3/charta/src/reportWebVitals.ts":"2","/Users/rubenkrueger/Downloads/Team3/charta/src/App.tsx":"3","/Users/rubenkrueger/Downloads/Team3/charta/src/components/header.tsx":"4","/Users/rubenkrueger/Downloads/Team3/charta/src/components/footer.tsx":"5","/Users/rubenkrueger/Downloads/Team3/charta/src/components/card.tsx":"6","/Users/rubenkrueger/Downloads/Team3/charta/src/components/planner.tsx":"7","/Users/rubenkrueger/Downloads/Team3/charta/src/components/quarter.tsx":"8","/Users/rubenkrueger/Downloads/Team3/charta/src/firebase.js":"9","/Users/rubenkrueger/Downloads/Team3/charta/src/auth/signin.tsx":"10","/Users/rubenkrueger/Downloads/Team3/charta/src/components/home.tsx":"11","/Users/rubenkrueger/Downloads/Team3/charta/src/auth/signup.tsx":"12","/Users/rubenkrueger/Downloads/Team3/charta/src/components/notfound.tsx":"13","/Users/rubenkrueger/Downloads/Team3/charta/src/account/settings.tsx":"14","/Users/rubenkrueger/Downloads/Team3/charta/src/components/searchbar.tsx":"15","/Users/rubenkrueger/Downloads/Team3/charta/src/data/course.tsx":"16","/Users/rubenkrueger/Downloads/Team3/charta/src/data/usercourse.tsx":"17","/Users/rubenkrueger/Downloads/Team3/charta/src/components/recommendation.tsx":"18","/Users/rubenkrueger/Downloads/Team3/charta/src/components/searchresults.tsx":"19"},{"size":504,"mtime":1614094583215,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1614094583215,"results":"22","hashOfConfig":"21"},{"size":1121,"mtime":1614116650730,"results":"23","hashOfConfig":"21"},{"size":2300,"mtime":1614114761720,"results":"24","hashOfConfig":"21"},{"size":558,"mtime":1614094583212,"results":"25","hashOfConfig":"21"},{"size":1401,"mtime":1613079244111,"results":"26","hashOfConfig":"21"},{"size":8880,"mtime":1614094583213,"results":"27","hashOfConfig":"21"},{"size":10643,"mtime":1614094583214,"results":"28","hashOfConfig":"21"},{"size":527,"mtime":1614094583215,"results":"29","hashOfConfig":"21"},{"size":5465,"mtime":1614094583212,"results":"30","hashOfConfig":"21"},{"size":1456,"mtime":1614114761720,"results":"31","hashOfConfig":"21"},{"size":7568,"mtime":1614094583212,"results":"32","hashOfConfig":"21"},{"size":791,"mtime":1613510455078,"results":"33","hashOfConfig":"21"},{"size":10432,"mtime":1614094583212,"results":"34","hashOfConfig":"21"},{"size":4771,"mtime":1614118439661,"results":"35","hashOfConfig":"21"},{"size":1775,"mtime":1614114761722,"results":"36","hashOfConfig":"21"},{"size":442,"mtime":1614094583214,"results":"37","hashOfConfig":"21"},{"size":845,"mtime":1614094583214,"results":"38","hashOfConfig":"21"},{"size":4249,"mtime":1614117898098,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"waydk2",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rubenkrueger/Downloads/Team3/charta/src/index.tsx",[],["84","85"],"/Users/rubenkrueger/Downloads/Team3/charta/src/reportWebVitals.ts",[],"/Users/rubenkrueger/Downloads/Team3/charta/src/App.tsx",["86","87"],"/Users/rubenkrueger/Downloads/Team3/charta/src/components/header.tsx",["88"],"/Users/rubenkrueger/Downloads/Team3/charta/src/components/footer.tsx",[],"/Users/rubenkrueger/Downloads/Team3/charta/src/components/card.tsx",[],["89","90"],"/Users/rubenkrueger/Downloads/Team3/charta/src/components/planner.tsx",["91"],"import React, {Component} from 'react';\nimport Quarter from './quarter';\nimport Grid from '@material-ui/core/Grid';\nimport firebase from \"firebase\";\nimport 'firebase/firestore'\nimport '../firebase';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Container from '@material-ui/core/Container';\nimport Button from \"@material-ui/core/Button\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\n\ninterface PlannerState {\n    loading: boolean;\n    quarters: Array<string>;\n    empty: boolean;\n    open: boolean;\n    success: boolean;\n    failure: boolean;\n    term: string;\n    year: number;\n    welcome: boolean;\n    firstName: string;\n}\n\ninterface PlannerProps {\n\n}\n\nclass Planner extends Component<PlannerProps, PlannerState> {\n\n\n    async componentDidMount() {\n        const db = firebase.firestore();\n        let user = firebase.auth().currentUser;\n        const userRef = db.collection('users').doc(user?.uid);\n        const doc = await userRef.get();\n\n\n        if (!doc.exists) {\n            console.log('No such user!');\n\n        } else {\n            console.log('Document data:', doc.data());\n            let quarters = doc.data()?.quarters;\n\n            this.setState({firstName: doc.data()?.firstName});\n\n            if(quarters) {\n                this.setState({quarters: quarters});\n            }\n\n            else {\n                this.setState({quarters: []});\n            }\n\n            if(this.state.quarters.length == 0){\n                this.setState({welcome: true});\n            }\n\n        }\n\n        this.setState({loading: false});\n\n    }\n\n    constructor(props: PlannerProps) {\n        super(props);\n        this.state = {loading: true, quarters: [], empty: false, open: false, success: false, term: \"\", year: 2021, failure: false, welcome: false, firstName: \"\"};\n        this.addQuarter = this.addQuarter.bind(this);\n\n\n    }\n\n    async addQuarter() {\n        this.setState({open: false});\n\n        let uid = firebase.auth().currentUser?.uid;\n        const db = firebase.firestore();\n\n        let quarter = `${this.state.term + \" \" + this.state.year}`;\n\n        const userRef = db.collection('users').doc(uid);\n\n        let quarters = this.state.quarters;\n        quarters.push(quarter);\n\n        this.setState({quarters: quarters});\n\n        await userRef.update({\n            quarters: quarters\n        });\n\n        db.collection(`users/${uid}/${quarter}`).doc(\"test\").set({\n            ignore: \"true\"\n        }).then((res) => {\n            console.log(res);\n            this.setState({success: true});\n        }).catch((error) => {\n            console.log(error.code, error.message);\n            this.setState({failure: true});\n        });\n\n    }\n\n    render() {\n        const theme = createMuiTheme({\n            palette: {\n                primary: { main: \"#6FCF97\" },\n                secondary: { main: '#6FCF97' },\n            },\n        });\n\n        return(\n            <MuiThemeProvider theme={theme}>\n\n            <Container>\n                <Backdrop  open={this.state.loading}>\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n\n\n                <Grid container spacing={3}>\n                    <Grid item>\n                        <h1>Planned Schedule</h1>\n\n                    </Grid>\n                    <Grid item>\n                        <Button onClick={() => this.setState({open: true})} >Add quarter<AddCircleIcon/></Button>\n                        </Grid>\n                </Grid>\n\n\n                <Grid container spacing={3}>\n                    <Grid item xs={4}>\n                        {this.state.quarters.length > 0 ? this.state.quarters.map((quarter: string, i: number) => {\n                            if(i % 3 === 0){return <Quarter name={this.state.quarters[i]} key={i}/>}\n                            else {return <span/>}\n                        }) : ''}\n\n                    </Grid>\n                    <Grid item xs={4}>\n                        {this.state.quarters.length > 0 ? this.state.quarters.map((quarter: string, i: number) => {\n                            if(i % 3 === 1){return <Quarter name={this.state.quarters[i]} key={i}/>}\n                            else {return <span/>}\n                        }) : ''}\n                    </Grid>\n                    <Grid item xs={4}>\n                        {this.state.quarters.length > 0 ? this.state.quarters.map((quarter: string, i: number) => {\n                            if(i % 3 === 2){return <Quarter name={this.state.quarters[i]} key={i}/>}\n                            else {return <span/>}\n                        }) : ''}                    </Grid>\n\n                </Grid>\n\n\n                <Dialog open={this.state.open}>\n                    <DialogTitle><h1 className=\"text-center\">Add quarter</h1></DialogTitle>\n                    <DialogContent>\n\n                        <FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\">Term</FormLabel>\n                            <RadioGroup aria-label=\"term\" name=\"term\" value={this.state.term} onChange={(evt) => this.setState({term: evt.target.value})}\n                            >\n                                <FormControlLabel value=\"Fall\" control={<Radio color=\"secondary\"/>} label=\"Fall\" />\n                                <FormControlLabel value=\"Winter\" control={<Radio />} label=\"Winter\" />\n                                <FormControlLabel value=\"Spring\" control={<Radio />} label=\"Spring\" />\n                                <FormControlLabel value=\"Summer\" control={<Radio />} label=\"Summer\" />\n                            </RadioGroup>\n                        </FormControl>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            label=\"year\"\n                            type=\"number\"\n                            value={this.state.year}\n\n                            onChange={(evt) => this.setState({year: parseInt(evt.target.value)})}\n                            fullWidth\n                        />\n\n\n                    </DialogContent>\n                    <DialogActions>\n                        <Button  variant=\"outlined\" color=\"primary\"  onClick={() => this.setState({open: false})} className=\"cancelButton\">\n                            Cancel\n                        </Button>\n\n                        <Button onClick={this.addQuarter} color=\"primary\">\n                            Add\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n\n\n                <Dialog open={this.state.welcome && !this.state.loading}>\n                    <DialogTitle><h1 className=\"text-center\">Welcome, {this.state.firstName} 👋 </h1></DialogTitle>\n                    <DialogContent>\n                        <Container maxWidth=\"sm\">\n                            <p>We're glad that you're here. Feel free to look up courses, plan your quarters, or find study groups.</p>\n                        </Container>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={()=> this.setState({welcome: false})} color=\"primary\">\n                            Let's get started\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n\n\n                <div>\n                    <Snackbar onClose={() => this.setState({success: false})} open={this.state.success} autoHideDuration={2000}>\n                        <MuiAlert severity=\"success\">\n                            Quarter added! 😃\n                        </MuiAlert>\n                    </Snackbar>\n\n                    <Snackbar onClose={() => this.setState({failure: false})} open={this.state.failure} autoHideDuration={2000}>\n                        <MuiAlert severity=\"warning\">\n                            Oops 🥴... something went wrong\n                        </MuiAlert>\n                    </Snackbar>\n                </div>\n\n            </Container>\n            </MuiThemeProvider>\n        );\n    }\n\n\n}\n\n\nexport default Planner;","/Users/rubenkrueger/Downloads/Team3/charta/src/components/quarter.tsx",["92"],"import {Component} from \"react\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport React from 'react';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport TextField from '@material-ui/core/TextField';\nimport firebase from \"firebase\";\nimport 'firebase/firestore'\nimport '../firebase';\nimport UserCourse from '../data/usercourse';\n\ninterface QuarterState {\n    open: boolean;\n    onClick: React.MouseEventHandler<HTMLButtonElement>;\n    courses: Array<any>;\n    newCourse: string;\n    newTitle: string;\n    newUnits: number;\n    newGrade: string;\n    newReason: string;\n    totalUnits: number;\n}\ninterface QuarterProps {\n    name: string\n}\nclass Quarter extends Component<QuarterProps, QuarterState> {\n\n\n    // load the courses for this quarter\n   async loadCourses(path: string) {\n       const db = firebase.firestore();\n\n       // doc.data()?.[\"quarters\"];\n\n       let courses: Array<UserCourse> = [];\n       let totalUnits = 0;\n\n       // iterate over courses in this quarter\n       db.collection(path).get().then( (querySnapshot) => {\n\n            // get the course\n           querySnapshot.forEach(async(doc) =>  {\n               // let course = await this.loadCourse(doc);\n               let course = doc.data();\n               console.log(course);\n               courses.push(new UserCourse(course?.code, course?.reason, course?.grade, course?.units, this.props.name, course?.title));\n               totalUnits += course.units;\n           })\n\n\n       });\n\n       this.setState({courses: courses});\n       this.setState({totalUnits: totalUnits});\n\n\n   }\n\n    async componentDidMount() {\n        const db = firebase.firestore();\n        let user = firebase.auth().currentUser;\n        const userRef = db.collection('users').doc(user?.uid);\n        const userData = await userRef.get();\n\n        if (!userData.exists) {\n            console.log('User data could not be found');\n        } else {\n            await this.loadCourses(`users/${user?.uid}/${this.props.name}`);\n        }\n\n    }\n\n\n    constructor(props: QuarterProps) {\n        super(props);\n\n        this.handleOpen = this.handleOpen.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.addCourse = this.addCourse.bind(this);\n        this.loadCourses = this.loadCourses.bind(this);\n\n        this.state = {open: false,\n                   onClick: this.handleOpen,\n                   courses: [],\n                 newCourse: '',\n                  newTitle: '',\n                  newGrade: '',\n                  newUnits: 0,\n                 newReason: '',\n                totalUnits: 0,\n                    };\n\n    }\n\n\n    handleOpen() {\n        this.setState({open: true});\n    }\n\n    handleClose() {\n        this.setState({open: false});\n    }\n\n    async addCourse() {\n        // this.state.courses.push(new UserCourse(this.state.newCourse, this.state.newTitle, this.state.newUnits, this.state.newGrade, this.state.newReason));\n\n        const db = firebase.firestore();\n        let user = firebase.auth().currentUser;\n        const userRef = db.collection('users').doc(user?.uid);\n        const doc = await userRef.get();\n\n        // const userRef = db.collection('users').doc('ruben1');\n        // const doc = await userRef.get();\n        //\n        //  .doc('LA').set({\n        //     name: 'Los Angeles', state: 'CA', country: 'USA',\n        //     capital: false, population: 3900000\n        // });\n\n        this.handleClose();\n    }\n\n\n\n    render() {\n\n        return (\n            <Accordion>\n                <AccordionSummary className=\"quarter-summary\">\n                    <div className=\"\">\n                        <h1 id=\"quarter-title\"><strong>{this.props.name}</strong></h1>\n                    </div>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <TableContainer >\n                        <Table aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Course Number</TableCell>\n                                    <TableCell align=\"right\">Title</TableCell>\n                                    <TableCell align=\"right\">Units</TableCell>\n                                    <TableCell align=\"right\">Grade</TableCell>\n                                    <TableCell align=\"right\">Reason</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {this.state.courses.map((course) => (\n                                    <TableRow key={course.number}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {course.code}\n                                        </TableCell>\n                                        <TableCell align=\"right\">{course.title}</TableCell>\n                                        <TableCell align=\"right\">{course.units}</TableCell>\n                                        <TableCell align=\"right\">{course.grade}</TableCell>\n                                        <TableCell align=\"right\">{course.reason}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                            <TableRow>\n                                <TableCell>Total</TableCell>\n                                <TableCell align=\"right\"> </TableCell>\n                                <TableCell align=\"right\">{this.state.totalUnits}</TableCell>\n                                <TableCell align=\"right\"> </TableCell>\n                                <TableCell align=\"right\"><Button onClick={this.handleOpen}><AddCircleIcon/></Button></TableCell>\n\n                                <Dialog open={this.state.open}>\n                                    <DialogTitle>Add a course</DialogTitle>\n                                    <DialogContent>\n                                        {/*<DialogContentText>*/}\n                                        {/*    To subscribe to this website, please enter your email address here. We will send updates*/}\n                                        {/*    occasionally.*/}\n                                        {/*</DialogContentText>*/}\n                                        <TextField\n                                            autoFocus\n                                            margin=\"dense\"\n                                            id=\"name\"\n                                            label=\"course\"\n                                            type=\"text\"\n                                            value={this.state.newCourse}\n                                            onChange={(evt) => this.setState({newCourse: evt.target.value})}\n                                            fullWidth\n                                        />\n\n                                        <TextField\n                                            autoFocus\n                                            margin=\"dense\"\n                                            id=\"title\"\n                                            label=\"title\"\n                                            type=\"text\"\n                                            onChange={(evt) => this.setState({newTitle: evt.target.value})}\n                                            fullWidth\n                                        />\n\n                                        <TextField\n                                            autoFocus\n                                            margin=\"dense\"\n                                            id=\"units\"\n                                            label=\"units\"\n                                            type=\"number\"\n                                            onChange={(evt) => this.setState({newUnits: parseInt(evt.target.value)})}\n                                            fullWidth\n                                        />\n\n                                        <TextField\n                                            autoFocus\n                                            margin=\"dense\"\n                                            id=\"grade\"\n                                            label=\"grade\"\n                                            type=\"text\"\n                                            onChange={(evt) => this.setState({newGrade: evt.target.value})}\n                                            fullWidth\n                                        />\n\n\n                                        <TextField\n                                            autoFocus\n                                            margin=\"dense\"\n                                            id=\"reason\"\n                                            label=\"reason\"\n                                            type=\"text\"\n                                            onChange={(evt) => this.setState({newReason: evt.target.value})}\n                                            fullWidth\n                                        />\n                                    </DialogContent>\n                                    <DialogActions>\n                                        <Button onClick={this.handleClose} color=\"primary\" className=\"cancelButton\">\n                                            Cancel\n                                        </Button>\n\n                                        <Button onClick={this.addCourse} color=\"primary\">\n                                            Add\n                                        </Button>\n                                    </DialogActions>\n\n                                </Dialog>\n\n                            </TableRow>\n                        </Table>\n\n                    </TableContainer>\n                </AccordionDetails>\n\n            </Accordion>\n\n        );\n    }\n}\n\nexport default Quarter\n\n","/Users/rubenkrueger/Downloads/Team3/charta/src/firebase.js",[],["93","94"],"/Users/rubenkrueger/Downloads/Team3/charta/src/auth/signin.tsx",[],"/Users/rubenkrueger/Downloads/Team3/charta/src/components/home.tsx",[],"/Users/rubenkrueger/Downloads/Team3/charta/src/auth/signup.tsx",["95","96"],"import React, {Component} from \"react\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport EmailIcon from '@material-ui/icons/Email';\nimport LockIcon from '@material-ui/icons/Lock';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport { withRouter } from 'react-router'\nimport {RouteComponentProps} from \"react-router\";\nimport { Redirect } from 'react-router'\nimport {Link} from \"react-router-dom\";\nimport PersonIcon from '@material-ui/icons/Person';\n\ninterface SignUpProps extends RouteComponentProps<any> {\n\n}\n\n\ninterface SignUpState{\n    firstName: string,\n    email: string,\n    password: string,\n    confirmPassword: string,\n    redirect: boolean,\n    errorMsg: string,\n    agree: boolean\n}\n\n\nclass SignUp extends Component<SignUpProps, SignUpState> {\n\n\n    constructor(props: SignUpProps) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.createAccount = this.createAccount.bind(this);\n\n        this.state = {firstName: '', email: '',  password: '', confirmPassword: '', redirect: false, errorMsg: '', agree: false}\n\n    }\n\n\n    async createAccount() {\n        firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password)\n            .then(async (userCredential) => {\n                // Signed in\n                let user = userCredential.user;\n                const db = firebase.firestore();\n\n                await db.collection('users').doc(user?.uid).set({\"firstName\": this.state.firstName, \"quarters\": []});\n\n                // user?.uid\n                this.setState({redirect: true})\n\n            })\n            .catch((error) => {\n                this.setState({errorMsg: error.message})\n            });\n    }\n\n\n    async handleSubmit(e:  React.FormEvent) {\n        e.preventDefault();\n\n        if(!this.state.email.endsWith(\"@stanford.edu\")) {\n            this.setState({errorMsg: \"Email must be a stanford email\"});\n            return;\n        }\n\n        if(this.state.password !== this.state.confirmPassword) {\n            this.setState({errorMsg: \"Passwords must match\"});\n            return;\n        }\n\n        // if(!this.state.agree) {\n        //     this.setState({errorMsg: \"You must agree to the terms and conditions\"});\n        //     return;\n        // }\n\n        await this.createAccount();\n\n    }\n\n\n    render() {\n        if(this.state.redirect) {\n            return <Redirect to='/home'/>;\n        }\n\n        return(\n            <Container maxWidth=\"sm\">\n                <div>\n\n                    <img alt=\"Charta logo\" src={\"./Logo.png\"}/>\n                    <div>\n                        <Typography component=\"h1\" variant=\"h5\" align=\"center\">\n                            Sign up\n                        </Typography>\n                    </div>\n\n\n                    <form noValidate>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"firstName\"\n                            label=\"First name\"\n                            name=\"firstName\"\n                            onChange={(evt) => this.setState({firstName: evt.target.value})}\n                            autoFocus\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <PersonIcon />\n                                    </InputAdornment>\n                                )}}\n                        />\n\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            label=\"Email Address\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            onChange={(evt) => this.setState({email: evt.target.value})}\n                            autoFocus\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <EmailIcon />\n                                    </InputAdornment>\n                                )}}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            onChange={(evt) => this.setState({password: evt.target.value})}\n\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <LockIcon />\n                                    </InputAdornment>\n                                )}}\n                        />\n\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Confirm password\"\n                            type=\"password\"\n                            id=\"confirmPassword\"\n                            onChange={(evt) => this.setState({confirmPassword: evt.target.value})}\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <LockIcon />\n                                    </InputAdornment>\n                                )}}\n                        />\n                        {/*<FormControlLabel*/}\n                        {/*    control={<Checkbox color=\"primary\" required={true} value={this.state.agree}/>}*/}\n                        {/*    label=\"I agree to the terms and conditions\"*/}\n                        {/*/>*/}\n                        <p>{this.state.errorMsg}</p>\n\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={this.handleSubmit}\n                        >\n                            Sign Up\n                        </Button>\n                        <Grid container>\n                            <Grid item>\n                                <Link to=\"/signin\">\n                                    {\"Have an account?\"}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n            </Container>\n\n        );\n    }\n}\n\nexport default withRouter(SignUp);","/Users/rubenkrueger/Downloads/Team3/charta/src/components/notfound.tsx",["97"],"/Users/rubenkrueger/Downloads/Team3/charta/src/account/settings.tsx",[],"/Users/rubenkrueger/Downloads/Team3/charta/src/components/searchbar.tsx",["98"],"/Users/rubenkrueger/Downloads/Team3/charta/src/data/course.tsx",[],"/Users/rubenkrueger/Downloads/Team3/charta/src/data/usercourse.tsx",[],"/Users/rubenkrueger/Downloads/Team3/charta/src/components/recommendation.tsx",[],"/Users/rubenkrueger/Downloads/Team3/charta/src/components/searchresults.tsx",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":10,"column":8,"nodeType":"105","messageId":"106","endLine":10,"endColumn":16},{"ruleId":"103","severity":1,"message":"107","line":18,"column":9,"nodeType":"105","messageId":"106","endLine":18,"endColumn":19},{"ruleId":"108","severity":1,"message":"109","line":69,"column":85,"nodeType":"110","endLine":69,"endColumn":89},{"ruleId":"99","replacedBy":"111"},{"ruleId":"101","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":71,"column":43,"nodeType":"115","messageId":"116","endLine":71,"endColumn":45},{"ruleId":"103","severity":1,"message":"117","line":122,"column":15,"nodeType":"105","messageId":"106","endLine":122,"endColumn":18},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"118","line":4,"column":8,"nodeType":"105","messageId":"106","endLine":4,"endColumn":24},{"ruleId":"103","severity":1,"message":"119","line":5,"column":8,"nodeType":"105","messageId":"106","endLine":5,"endColumn":16},{"ruleId":"103","severity":1,"message":"120","line":7,"column":26,"nodeType":"105","messageId":"106","endLine":7,"endColumn":32},{"ruleId":"103","severity":1,"message":"121","line":1,"column":8,"nodeType":"105","messageId":"106","endLine":1,"endColumn":13},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"@typescript-eslint/no-unused-vars","'NotFound' is defined but never used.","Identifier","unusedVar","'withRouter' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement",["122"],["123"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'doc' is assigned a value but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Router' is defined but never used.","'fetch' is defined but never used.","no-global-assign","no-unsafe-negation"]