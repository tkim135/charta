[{"/Users/rubenkrueger/Downloads/Team3/charta/src/index.tsx":"1","/Users/rubenkrueger/Downloads/Team3/charta/src/reportWebVitals.ts":"2","/Users/rubenkrueger/Downloads/Team3/charta/src/App.tsx":"3","/Users/rubenkrueger/Downloads/Team3/charta/src/components/header.tsx":"4","/Users/rubenkrueger/Downloads/Team3/charta/src/components/footer.tsx":"5","/Users/rubenkrueger/Downloads/Team3/charta/src/components/card.tsx":"6","/Users/rubenkrueger/Downloads/Team3/charta/src/components/planner.tsx":"7","/Users/rubenkrueger/Downloads/Team3/charta/src/components/quarter.tsx":"8","/Users/rubenkrueger/Downloads/Team3/charta/src/firebase.js":"9","/Users/rubenkrueger/Downloads/Team3/charta/src/auth/signin.tsx":"10","/Users/rubenkrueger/Downloads/Team3/charta/src/components/home.tsx":"11","/Users/rubenkrueger/Downloads/Team3/charta/src/auth/signup.tsx":"12","/Users/rubenkrueger/Downloads/Team3/charta/src/components/notfound.tsx":"13"},{"size":504,"mtime":1613277372422,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1612064695741,"results":"16","hashOfConfig":"15"},{"size":777,"mtime":1613347422418,"results":"17","hashOfConfig":"15"},{"size":2035,"mtime":1613344449146,"results":"18","hashOfConfig":"15"},{"size":558,"mtime":1613277563829,"results":"19","hashOfConfig":"15"},{"size":1401,"mtime":1613079244111,"results":"20","hashOfConfig":"15"},{"size":2680,"mtime":1613343809454,"results":"21","hashOfConfig":"15"},{"size":9662,"mtime":1613267960033,"results":"22","hashOfConfig":"15"},{"size":527,"mtime":1613079244114,"results":"23","hashOfConfig":"15"},{"size":5305,"mtime":1613349216992,"results":"24","hashOfConfig":"15"},{"size":1232,"mtime":1613349298701,"results":"25","hashOfConfig":"15"},{"size":5478,"mtime":1613349398485,"results":"26","hashOfConfig":"15"},{"size":791,"mtime":1613348687916,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"waydk2",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/rubenkrueger/Downloads/Team3/charta/src/index.tsx",[],["60","61"],"/Users/rubenkrueger/Downloads/Team3/charta/src/reportWebVitals.ts",[],"/Users/rubenkrueger/Downloads/Team3/charta/src/App.tsx",[],"/Users/rubenkrueger/Downloads/Team3/charta/src/components/header.tsx",[],"/Users/rubenkrueger/Downloads/Team3/charta/src/components/footer.tsx",[],"/Users/rubenkrueger/Downloads/Team3/charta/src/components/card.tsx",[],["62","63"],"/Users/rubenkrueger/Downloads/Team3/charta/src/components/planner.tsx",["64","65"],"import React, {Component} from 'react';\nimport Quarter from './quarter';\nimport Grid from '@material-ui/core/Grid';\nimport firebase from \"firebase\";\nimport 'firebase/firestore'\nimport '../firebase';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\n\ninterface PlannerState {\n    loading: boolean;\n    quarters: Array<string>;\n}\n\ninterface PlannerProps {\n}\n\nclass Planner extends Component<PlannerProps, PlannerState> {\n\n    async componentDidMount() {\n        const db = firebase.firestore();\n\n        const userRef = db.collection('users').doc('ruben1');\n        const doc = await userRef.get();\n\n\n        if (!doc.exists) {\n            console.log('No such document!');\n        } else {\n            console.log('Document data:', doc.data());\n            let quarters = doc.data()?.quarters;\n            this.setState({quarters: quarters});\n        }\n\n        this.setState({loading: false});\n\n    }\n\n    constructor(props: PlannerProps) {\n        super(props);\n        this.state = {loading: true, quarters: []};\n\n    }\n\n\n    render() {\n        return(\n            <div>\n                <Backdrop  open={this.state.loading}>\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n\n                <h1>Courses</h1>\n\n\n                <Grid container spacing={3}>\n                    <Grid item xs={4}>\n                        {this.state.quarters.length > 0 ? this.state.quarters.map((quarter: string, i: number) => {\n                            if(i % 3 === 0){return <Quarter name={this.state.quarters[i]} key={i}/>}\n                            else {return <span/>}\n                        }) : 'loading'}\n\n                    </Grid>\n                    <Grid item xs={4}>\n                        {this.state.quarters.length > 0 ? this.state.quarters.map((quarter: string, i: number) => {\n                            if(i % 3 === 1){return <Quarter name={this.state.quarters[i]} key={i}/>}\n                            else {return <span/>}\n                        }) : 'loading'}\n                    </Grid>\n                    <Grid item xs={4}>\n                        {this.state.quarters.length > 0 ? this.state.quarters.map((quarter: string, i: number) => {\n                            if(i % 3 === 2){return <Quarter name={this.state.quarters[i]} key={i}/>}\n                            else {return <span/>}\n                        }) : 'loading'}                    </Grid>\n\n                </Grid>\n\n            </div>\n\n\n        );\n    }\n\n\n}\n\n\nexport default Planner;","/Users/rubenkrueger/Downloads/Team3/charta/src/components/quarter.tsx",["66"],"import {Component} from \"react\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport React from 'react';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport TextField from '@material-ui/core/TextField';\nimport firebase from \"firebase\";\nimport 'firebase/firestore'\nimport '../firebase';\n\n\ninterface QuarterState {\n    open: boolean;\n    onClick: React.MouseEventHandler<HTMLButtonElement>;\n    courses: Array<any>;\n    newCourse: string;\n    newTitle: string;\n    newUnits: number;\n    newGrade: string;\n    newReason: string;\n}\ninterface QuarterProps {\n    name: string\n}\n\nclass Quarter extends Component<QuarterProps, QuarterState> {\n\n    async componentDidMount() {\n        const db = firebase.firestore();\n\n        const userRef = db.collection('users').doc('ruben1');\n        const doc = await userRef.get();\n        if (!doc.exists) {\n            console.log('No such document!');\n        } else {\n            console.log('Document data:', doc.data());\n        }\n\n    }\n\n\n    constructor(props: QuarterProps) {\n        super(props);\n\n        const courses = [\n            this.createData('CS110', 'Principles of Computer Systems', 5, 'A', 'CS Core'),\n            this.createData('MATH51', 'Linear Algebra and Differential Calculus of Several Variables', 5, 'A', \"Math elective\"),\n            this.createData('BIOE131', 'Ethics in Bioengineering', 3, 'A', \"TiS\"),\n            this.createData('PSYCH1', 'Introduction to Psychology', 5, 'A', \"Fun\"),\n        ];\n\n\n        this.handleOpen = this.handleOpen.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.addCourse = this.addCourse.bind(this);\n\n        this.state = {open: false, onClick: this.handleOpen, courses: courses, newCourse: '', newTitle: '', newGrade: '', newUnits: 0, newReason: ''};\n\n\n    }\n\n\n    handleOpen() {\n        this.setState({open: true});\n    }\n\n    handleClose() {\n        this.setState({open: false});\n    }\n\n    async addCourse() {\n        this.state.courses.push(this.createData(this.state.newCourse, this.state.newTitle, this.state.newUnits, this.state.newGrade, this.state.newReason));\n\n        const db = firebase.firestore();\n\n        // const userRef = db.collection('users').doc('ruben1');\n        // const doc = await userRef.get();\n        //\n        //  .doc('LA').set({\n        //     name: 'Los Angeles', state: 'CA', country: 'USA',\n        //     capital: false, population: 3900000\n        // });\n\n        this.handleClose();\n    }\n\n    createData(number: string, title: string, units: number, grade: string, reason: string) {\n        return {number, title, units, grade, reason };\n    }\n\n    render() {\n\n        return (\n            <Accordion>\n                <AccordionSummary>{this.props.name}</AccordionSummary>\n                <AccordionDetails>\n                    <TableContainer component={Paper}>\n                        <Table aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Course Number</TableCell>\n                                    <TableCell align=\"right\">Title</TableCell>\n                                    <TableCell align=\"right\">Units</TableCell>\n                                    <TableCell align=\"right\">Grade</TableCell>\n                                    <TableCell align=\"right\">Reason</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {this.state.courses.map((course) => (\n                                    <TableRow key={course.number}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {course.number}\n                                        </TableCell>\n                                        <TableCell align=\"right\">{course.title}</TableCell>\n                                        <TableCell align=\"right\">{course.units}</TableCell>\n                                        <TableCell align=\"right\">{course.grade}</TableCell>\n                                        <TableCell align=\"right\">{course.reason}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                            <TableRow>\n                                <TableCell>Total</TableCell>\n                                <TableCell align=\"right\"> </TableCell>\n                                <TableCell align=\"right\">18</TableCell>\n                                <TableCell align=\"right\">4.0</TableCell>\n                                <TableCell align=\"right\"><Button onClick={this.handleOpen}><AddCircleIcon/></Button></TableCell>\n\n                                <Dialog open={this.state.open}>\n                                    <DialogTitle>Add a course</DialogTitle>\n                                    <DialogContent>\n                                        {/*<DialogContentText>*/}\n                                        {/*    To subscribe to this website, please enter your email address here. We will send updates*/}\n                                        {/*    occasionally.*/}\n                                        {/*</DialogContentText>*/}\n                                        <TextField\n                                            autoFocus\n                                            margin=\"dense\"\n                                            id=\"name\"\n                                            label=\"course\"\n                                            type=\"text\"\n                                            value={this.state.newCourse}\n                                            onChange={(evt) => this.setState({newCourse: evt.target.value})}\n                                            fullWidth\n                                        />\n\n                                        <TextField\n                                            autoFocus\n                                            margin=\"dense\"\n                                            id=\"title\"\n                                            label=\"title\"\n                                            type=\"text\"\n                                            onChange={(evt) => this.setState({newTitle: evt.target.value})}\n                                            fullWidth\n                                        />\n\n                                        <TextField\n                                            autoFocus\n                                            margin=\"dense\"\n                                            id=\"units\"\n                                            label=\"units\"\n                                            type=\"number\"\n                                            onChange={(evt) => this.setState({newUnits: parseInt(evt.target.value)})}\n                                            fullWidth\n                                        />\n\n                                        <TextField\n                                            autoFocus\n                                            margin=\"dense\"\n                                            id=\"grade\"\n                                            label=\"grade\"\n                                            type=\"text\"\n                                            onChange={(evt) => this.setState({newGrade: evt.target.value})}\n                                            fullWidth\n                                        />\n\n\n                                        <TextField\n                                            autoFocus\n                                            margin=\"dense\"\n                                            id=\"reason\"\n                                            label=\"reason\"\n                                            type=\"text\"\n                                            onChange={(evt) => this.setState({newReason: evt.target.value})}\n                                            fullWidth\n                                        />\n                                    </DialogContent>\n                                    <DialogActions>\n                                        <Button onClick={this.handleClose} color=\"primary\">\n                                            Cancel\n                                        </Button>\n\n                                        <Button onClick={this.addCourse} color=\"primary\">\n                                            Add\n                                        </Button>\n                                    </DialogActions>\n\n                                </Dialog>\n\n                            </TableRow>\n                        </Table>\n\n                    </TableContainer>\n                </AccordionDetails>\n\n            </Accordion>\n\n        );\n    }\n}\n\nexport default Quarter\n\n","/Users/rubenkrueger/Downloads/Team3/charta/src/firebase.js",[],["67","68"],"/Users/rubenkrueger/Downloads/Team3/charta/src/auth/signin.tsx",["69"],"import React, {Component} from \"react\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport EmailIcon from '@material-ui/icons/Email';\nimport LockIcon from '@material-ui/icons/Lock';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport { withRouter } from 'react-router'\nimport {RouteComponentProps} from \"react-router\";\nimport { Redirect } from 'react-router'\nimport {Link } from 'react-router-dom';\n\ninterface SigninProps extends RouteComponentProps<any> {\n\n}\n\n\ninterface SigninState{\n    email: string,\n    password: string,\n    redirect: boolean\n}\n\nclass Signin extends Component<SigninProps, SigninState> {\n\n    // componentDidMount() {\n    //     let signedIn = false;\n    //     firebase.auth().onAuthStateChanged(function(user) {\n    //         if (user) {\n    //             signedIn = true;\n    //         }\n    //     });\n    //\n    //     if(signedIn) {\n    //         this.setState({redirect: true});\n    //     }\n    //\n    // }\n\n\n    constructor(props: SigninProps) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.state = {email: '',  password: '', redirect: false}\n    }\n\n\n    handleSubmit(e:  React.FormEvent) {\n        e.preventDefault();\n\n        firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password)\n            .then((userCredential) => {\n                // Signed in\n                var user = userCredential.user;\n                console.log(\"signed in!\");\n                this.setState({redirect: true });\n\n            })\n            .catch((error) => {\n                console.log(error.code, error.message);\n            });\n    }\n\n\n    render() {\n\n        if(this.state.redirect) {\n            return <Redirect to='/home'/>;\n        }\n\n        return(\n            <Container maxWidth=\"sm\">\n                <div>\n\n                    <Typography component=\"h1\" variant=\"h5\" align=\"center\">\n                        Sign in\n                    </Typography>\n                    <form noValidate>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            label=\"Email Address\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            onChange={(evt) => this.setState({email: evt.target.value})}\n                            autoFocus\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <EmailIcon />\n                                    </InputAdornment>\n                                )}}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            onChange={(evt) => this.setState({password: evt.target.value})}\n                            autoComplete=\"current-password\"\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <LockIcon />\n                                    </InputAdornment>\n                                )}}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox value=\"remember\" color=\"primary\" />}\n                            label=\"Remember me\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={this.handleSubmit}\n                        >\n                            Sign In\n                        </Button>\n                        <Grid container>\n                            <Grid item xs>\n                                <p>\n                                    Forgot password?\n                                </p>\n                            </Grid>\n                            <Grid item>\n                                <Link to=\"/signup\">\n                                    {\"Don't have an account? Sign Up\"}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n            </Container>\n\n        );\n    }\n}\n\nexport default withRouter(Signin);\n\n\n\n","/Users/rubenkrueger/Downloads/Team3/charta/src/components/home.tsx",["70"],"/Users/rubenkrueger/Downloads/Team3/charta/src/auth/signup.tsx",["71"],"/Users/rubenkrueger/Downloads/Team3/charta/src/components/notfound.tsx",["72"],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"73","replacedBy":"77"},{"ruleId":"75","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":9,"column":8,"nodeType":"81","messageId":"82","endLine":9,"endColumn":16},{"ruleId":"79","severity":1,"message":"83","line":10,"column":8,"nodeType":"81","messageId":"82","endLine":10,"endColumn":17},{"ruleId":"79","severity":1,"message":"84","line":87,"column":15,"nodeType":"81","messageId":"82","endLine":87,"endColumn":17},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"79","severity":1,"message":"85","line":60,"column":21,"nodeType":"81","messageId":"82","endLine":60,"endColumn":25},{"ruleId":"79","severity":1,"message":"86","line":12,"column":27,"nodeType":"81","messageId":"82","endLine":12,"endColumn":33},{"ruleId":"79","severity":1,"message":"85","line":53,"column":21,"nodeType":"81","messageId":"82","endLine":53,"endColumn":25},{"ruleId":"79","severity":1,"message":"86","line":7,"column":26,"nodeType":"81","messageId":"82","endLine":7,"endColumn":32},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],["87"],["88"],"@typescript-eslint/no-unused-vars","'TableRow' is defined but never used.","Identifier","unusedVar","'TableCell' is defined but never used.","'db' is assigned a value but never used.","'user' is assigned a value but never used.","'Router' is defined but never used.","no-global-assign","no-unsafe-negation"]